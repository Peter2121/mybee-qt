import QtQuick 2.15
import QtQuick.Controls 2.15
import QtQuick.Controls.Material 2.15

import CppCustomModules 1.0

SplitView {
    id: control
    orientation: appPortraitView ? Qt.Vertical : Qt.Horizontal

    property int maxButtonWidth: 100
    property int splitThickness: 3
    readonly property int buttonWidth: Math.max(maxButtonWidth, width / (tabBar.count ? tabBar.count : 1))
    readonly property int buttonHeight: tabBar.contentItem.currentItem ? tabBar.contentItem.currentItem.height : 0

    function appendText(text) {
        vmActivityView.appendText(text)
    }

    handle: Rectangle {
        implicitWidth: appPortraitView ? parent.height : control.splitThickness
        implicitHeight: appPortraitView ? control.splitThickness : parent.width
        color: Material.foreground
        opacity: SplitHandle.hovered || SplitHandle.pressed ? 1 : 0.3
        SplitHandle.onHoveredChanged: {
            if (!SplitHandle.hovered) SystemHelper.setCursorShape(-1)
            else SystemHelper.setCursorShape(appPortraitView ? Qt.SplitVCursor : Qt.SplitHCursor)
        }
    }

    TabBar {
        id: tabBar
        SplitView.preferredWidth: appPortraitView ? control.width : Math.round(control.width * 0.2) - 1
        wheelEnabled: appPortraitView
        currentIndex: tabRepeater.model.indexOf(VMConfigSet.lastSelected)
        Repeater {
            id: tabRepeater
            model: Object.keys(VMConfigSet.configMap)
            TabButton {
                readonly property var cfg: VMConfigSet.configMap[modelData]
                padding: appTextPadding
                width: appPortraitView ? control.buttonWidth : tabBar.width
                display: appPortraitView ? AbstractButton.TextUnderIcon : AbstractButton.TextBesideIcon
                font.pointSize: appPortraitView ? appTipSize : appWindow.font.pointSize
                font.bold: appPortraitView
                text: cfg["alias"]
                icon.source: !cfg.hasOwnProperty("id") ? "qrc:/icon-config" :
                    ((cfg["is_power_on"] === "true" || cfg["is_power_on"] === true) ? "qrc:/icon-power-on" : "qrc:/icon-power-off")
                icon.color: "transparent"
                down: tabBar.currentIndex === TabBar.index
                ToolTip.visible: hovered
                ToolTip.text: cfg["name"]
                ToolTip.delay: appTipDelay
                ToolTip.timeout: appTipTimeout
                onClicked: VMConfigSet.setCurrent(modelData)
                TapHandler {
                   acceptedButtons: Qt.RightButton
                   onTapped: {
                       VMConfigSet.setCurrent(modelData)
                       appPopup(true)
                   }
                }
            }
        }
        /*Component.onCompleted: {
            contentItem.orientation = Qt.binding(function() {
                return appPortraitView ? ListView.Horizontal : ListView.Vertical
            })
            contentItem.contentWidth = Qt.binding(function() {
                return (appPortraitView ? contentItem.count : 1) * control.buttonHeight
            })
            contentItem.contentHeight = Qt.binding(function() {
                return (appPortraitView ? 1 : contentItem.count) * control.buttonHeight
            })
        }*/
        contentItem: ListView {
            model: tabBar.contentModel
            currentIndex: tabBar.currentIndex
            orientation: appPortraitView ? ListView.Horizontal : ListView.Vertical
            boundsBehavior: Flickable.StopAtBounds
            flickableDirection: Flickable.AutoFlickIfNeeded
            snapMode: ListView.SnapToItem
            contentWidth: (appPortraitView ? contentItem.count : 1) * control.buttonHeight
            contentHeight: (appPortraitView ? 1 : contentItem.count) * control.buttonHeight

            highlightMoveDuration: 250
            highlightResizeDuration: 0
            highlightFollowsCurrentItem: true
            highlightRangeMode: ListView.ApplyRange
            preferredHighlightBegin: 48
            preferredHighlightEnd: width - 48
            highlight: Rectangle {
                //z: 2
                height: 2
                width: parent.width
                //y: parent.height - height
                color: Material.accent
            }
        }
    }

    VMActivityView {
        id: vmActivityView
        focus: true
        SplitView.minimumWidth: appWindow.minimumWidth
        SplitView.minimumHeight: control.height - control.buttonHeight - control.splitThickness
        SplitView.preferredWidth: appPortraitView ? control.width : Math.round(control.width * 0.8)
    }
}
