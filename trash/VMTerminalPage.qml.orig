import QtQuick 2.15
import QtQuick.Controls 2.15
import QtQuick.Controls.Material 2.15
import QtQuick.Layouts 1.15

import CppCustomModules 1.0
import QmlCustomModules 1.0

Page {
    id: control
    title: VMConfigSet.valueAt("ssh_string")
    enabled: VMConfigSet.isSshUser
    Material.background: termBackground

    readonly property string myClassName: control.toString().match(/.+?(?=_)/)[0]

    // On Mac, Ctrl == Cmd. For Linux and Windows, Alt is more natural I think.
    //readonly property string tabChangeKey: Qt.platform.os === "osx" ? "Ctrl" : "Alt"

    property string termPanLeft:    "\\e\\e[C"
    property string termPanRight:   "\\e\\e[D"
    property string termPanUp:      "\\e[6~"
    property string termPanDown:    "\\e[5~"
    property bool termFadeCursor:   true
    property bool termVisualBell:   true
    property string termBackground: "black"
    property string termSelection:  "lightGray"

    MySettings {
        id: termSettings
        category: control.myClassName
        property alias panLeft:     control.termPanLeft
        property alias panRight:    control.termPanRight
        property alias panUp:       control.termPanUp
        property alias panDown:     control.termPanDown
        property alias fadeCursor:  control.termFadeCursor
        property alias visualBell:  control.termVisualBell
        property alias background:  control.termBackground
        property alias selection:   control.termSelection
    }

    Component.onCompleted: sshSession.connectToHost()

    SshSession {
        id: sshSession
        logLevel: SshSession.LogLevelProtocol
        settings {
            //user: VMConfigSet.valueAt("ssh_user")
            //host: VMConfigSet.valueAt("ssh_host")
            host: "aspire"
            //port: parseInt(VMConfigSet.valueAt("ssh_port"))
            //checkServer: SystemHelper.loadSettings("checkServerKey", false)
            //privateKey: VMConfigSet.valueAt("ssh_key")
            //termType: VMConfigSet.valueAt("ssh_term")
        }
        onStateChanged: {
            switch (state) {
            case SshSession.StateClosed:
                progressPane.text += lastError ? lastError : qsTr("Connection closed")
                break
            case SshSession.StateConnecting:
                progressPane.text += qsTr("Connecting %1...").arg(url)
                break
            case SshSession.StateServerCheck:
                progressPane.text += qsTr("Checking the server for safe use")
                break
            case SshSession.StateUserAuth:
                progressPane.text += qsTr("User authentication")
                break
            case SshSession.StateEstablished:
                progressPane.text += qsTr("Encrypted connection established")
                Qt.callLater(sshListModel.addShellView)
                break
            case SshSession.StateError:
                progressPane.text += lastError ? lastError : qsTr("Unknown error")
                break
            case SshSession.StateDenied:
                progressPane.text += qsTr("Authentication failed")
                break
            case SshSession.StateTimeout:
                progressPane.text += qsTr("Connection timed out (max %1 sec)").arg(settings.timeout);
                break
            case SshSession.StateClosing:
                progressPane.text += lastError ? lastError : qsTr("Closing connection...")
                break
            }
            progressPane.text += "\n\n"
        }
        onHostConnected: print("onHostConnected")
        onPubkeyHashChanged: print("pubkeyHashChanged", pubkeyHash)
        onKnownHostChanged: {
            var warn = true, text
            switch (knownHost) {
            case SshSession.KnownHostNone:
            case SshSession.KnownHostOk:
                return
            case SshSession.KnownHostUnknown:
            case SshSession.KnownHostCreated:
                warn = false
                text = qsTr("Server is unknown. The host key will be added to known hosts")
                break
            case SshSession.KnownHostUpdated:
                text = qsTr("The server host key has been updated. Do you trust the new host key?")
                break
            case SshSession.KnownHostUpgraded:
                text = qsTr("The server host key type has changed. Are you sure the server is valid?")
                break
            }
            text += "\n\n"
            text += qsTr("Public key hash: %1").arg(pubkeyHash)
            var dlg = warn ? appWarning(text, Dialog.Yes | Dialog.No) : appInfo(text)
            dlg.accepted.connect(writeKnownHost)
            dlg.rejected.connect(appStackView.pop)
        }
        onAskQuestions: function(info, prompts) {
            if (!prompts.length) return
            var dlg = appDialog("SshPromptsDialog.qml", { title: qsTr("Access to <b>%1</b>").arg(url),
                                                            info: info, prompts: prompts })
            dlg.accepted.connect(function() { giveAnswers(dlg.answers()) })
            dlg.rejected.connect(appStackView.pop)
        }
        onOpenChannelsChanged: {
            print("onOpenChannelsChanged", openChannels)
            if (!openChannels) appStackView.pop
        }
    }

    ListModel {
        id: sshListModel
        function addShellView() {
            append({ text: qsTr("Term %1").arg(sshSession.openChannels + 1) })
            tabBar.currentIndex = count - 1
        }
    }

    header: Row {
        TabBar {
            id: tabBar
            clip: true
            width: control.width - addNewButton.width
            currentIndex: swipeView.currentIndex
            Repeater {
                model: sshListModel
                TabButton {
                    focusPolicy: Qt.NoFocus
                    rightPadding: spacing + removeTabButton.width
                    width: implicitWidth
                    text: modelData
                    background: Rectangle { color: removeTabButton.highlighted ? control.termBackground : "transparent" }
                    ToolButton {
                        id: removeTabButton
                        anchors.right: parent.right
                        focusPolicy: Qt.NoFocus
                        icon.source: "qrc:/icon-close"
                        highlighted: tabBar.currentItem === parent
                        onClicked: sshListModel.remove(parent.TabBar.index)
                    }
                }
            }
        }
        ToolButton {
            id: addNewButton
            focusPolicy: Qt.NoFocus
            enabled: sshSession.established
            icon.source: "qrc:/icon-create"
            onClicked: sshListModel.addShellView()
            ToolTip.visible: hovered
            ToolTip.text: qsTr("Open another terminal")
            ToolTip.delay: appTipDelay
            ToolTip.timeout: appTipTimeout
        }
    }

    StackLayout {
        anchors.fill: parent
        focus: true
        currentIndex: sshSession.openChannels ? 1 : 0
        ProgressPane {
            id: progressPane
            active: sshSession.running
            show: sshSession.state === SshSession.StateConnecting ||
                  sshSession.state === SshSession.StateServerCheck ||
                  sshSession.state === SshSession.StateUserAuth
            text: !control.enabled ? qsTr("No Ssh settings available") : ""
        }
        SwipeView {
            id: swipeView
            currentIndex: tabBar.currentIndex
            focus: true // turn-on active focus here
            //contentItem.focus: true // propagate to children items
            Repeater {
                model: sshListModel
                VMTerminalView {
                    ssh: sshSession
                    onClosed: sshListModel.remove(index)
                }
            }
        }
    }
}
