import QtQuick 2.15
import QtQuick.Controls 2.15
import QtQuick.Layouts 1.15

import CppCustomModules 1.0

Pane {
    id: control

    property int maxLines: 5
    property int rowHeight: listView.currentItem ? Math.round(listView.currentItem.implicitHeight) : appRowHeight
    readonly property string sshKeyFile: (listModel.count && ~listView.currentIndex) ? listModel.get(listView.currentIndex).text : ""

    Component.onCompleted: {
        addSshKey(VMConfigSet.cbsdSshKey)
        var list = SystemHelper.sshKeyPairs()
        for (var i = 0; i < list.length; i++) addSshKey(list[i])
    }

    function addSshKey(path) : int {
        if (!path) return -1
        var i
        for (i = 0; i < listModel.count; i++) {
            if (listModel.get(i).text === path) return i
        }
        switch (SystemHelper.isSshKeyPair(path) ? 2 : (SystemHelper.isSshPrivateKey(path) ? 1 : 0)) {
        case 0: listModel.append({ "icon": "qrc:/image-check-bad",  "text": path, "tip": qsTr("This is not an Ssh key") }); break
        case 1: listModel.append({ "icon": "qrc:/image-check-part", "text": path, "tip": qsTr("Private SSH key only") }); break
        case 2: listModel.append({ "icon": "qrc:/image-check-ok",   "text": path, "tip": qsTr("Private & public Ssh keys") }); break
        default: return -1
        }
        return listModel.count - 1
    }

    ListModel {
        id: listModel
    }

    RowLayout {
        anchors.fill: parent

        GroupBox {
            Layout.fillWidth: true
            Layout.preferredHeight: control.rowHeight * control.maxLines + topPadding + bottomPadding
            leftPadding: 0
            rightPadding: 0

            MyListView {
                id: listView
                anchors.fill: parent
                focus: true

                model: listModel
                delegate: ItemDelegate {
                    padding: appTextPadding
                    spacing: appTextPadding
                    width: ListView.view.width
                    height: control.rowHeight
                    highlighted: ListView.isCurrentItem
                    text: model.text
                    icon.source: model.icon
                    icon.color: "transparent"
                    onClicked: ListView.view.currentIndex = index
                    ToolTip.text: model.tip
                    ToolTip.visible: hovered
                    ToolTip.delay: appTipDelay
                    ToolTip.timeout: appTipTimeout
                }
            }
        }

        SquareButton {
            text: qsTr("Append")
            icon.source: "qrc:/icon-open-folder"
            ToolTip.text: qsTr("Open folder")
            onClicked: {
                var dlg = Qt.createComponent("MyFileDialog.qml").createObject(control, {
                            "title": qsTr("Select Ssh access key") })
                if (!dlg) { appToast(qsTr("Can't load MyFileDialog.qml")); return }
                dlg.accepted.connect(function() { listView.currentIndex = control.addSshKey(dlg.filePath()) })
                dlg.open()
            }
        }
    }
}
