import QtQuick 2.15
import QtQuick.Controls 2.15
import QtQuick.Controls.Material 2.15
import QtQuick.Layouts 1.15

import CppCustomModules 1.0
import QmlCustomModules 1.0

Page {
    id: control
    title: qsTr("Cloud server")
    enabled: !VMConfigSet.isBusy

    readonly property string myClassName: control.toString().match(/.+?(?=_)/)[0]
    readonly property var urlSchemeModel: [ "http", "https", "ssh", "file" ] // must be lower case!
    readonly property var urlPortModel:   [ 80, 443, 22, 0 ]
    property int schemeIndex: 0
    property bool isFileScheme: false
    property string lastServers
    property string currentServer

    Component.onCompleted: {
        var i, list
        lastServers = SystemHelper.loadSettings(myClassName + "/lastServers", "")
        if (!lastServers) {
            var env = SystemHelper.envVariable("CLOUD_URL")
            if (Url.isValidAt(env)) lastServers = env
        }
        if (lastServers) {
            list = lastServers.split(' ').filter(Boolean)
            for (i = 0; i < list.length; i++) {
                urlAuxModel.location = list[i].trim()
                if (~urlSchemeModel.indexOf(urlAuxModel.scheme) && VMConfigSet.isSchemeEnabled(urlAuxModel.scheme)) {
                    if (urlAuxModel.remote) {
                        historyListModel.append({ "scheme": urlAuxModel.scheme, "host": urlAuxModel.host, "port": urlAuxModel.port })
                    } else if (urlAuxModel.local && !pathTextField.text && SystemHelper.isExecutable(urlAuxModel.path)) {
                        pathTextField.text = urlAuxModel.path
                    }
                }
            }
        }
        if (VMConfigSet.cbsdEnabled) {
            if (!pathTextField.text) {
                pathTextField.text = VMConfigSet.cbsdPath
            } else if (pathTextField.text !== VMConfigSet.cbsdPath && SystemHelper.isExecutable(pathTextField.text)) {
                VMConfigSet.cbsdPath = pathTextField.text
            }
            if (!lastServers || lastServers.startsWith("file:")) {
                var index = urlSchemeModel.indexOf("file")
                if (~index) {
                    schemeIndex = index
                    isFileScheme = true
                }
            }
        }
        if (!isFileScheme && historyListModel.count) {
            schemeIndex = urlSchemeModel.indexOf(historyListModel.get(0).scheme)
        }
        keysListModel.addSshKey(VMConfigSet.cbsdSshKey)
        list = SystemHelper.sshKeyPairs()
        for (i = 0; i < list.length; i++) keysListModel.addSshKey(list[i])
    }

    Component.onDestruction: {
        if (currentServer) {
            var list = lastServers.split(' ').filter(Boolean)
            var index = list.indexOf(currentServer)
            if (index) {
                if (~index) list.splice(index, 1)
                else if (list.length >= 10) list.splice(9, list.length - 9)
                list.splice(0, 0, currentServer)
                SystemHelper.saveSettings(myClassName + "/lastServers", list.join(' '))
            }
        }
    }

    function setCurrentServer() {
        urlAuxModel.location = serverLabel.text
        if (urlAuxModel.port) {
            for (var i = 0; i < urlPortModel.length; i++) {
                if (urlAuxModel.port === urlPortModel[i] && urlAuxModel.scheme === urlSchemeModel[i]) {
                    urlAuxModel.port = 0
                    break
                }
            }
        }
        if (!urlAuxModel.valid || !keysListView.currentItem || !SystemHelper.isSshPrivateKey(keysListView.currentItem.text)) {
            appWarning(qsTr("There is no valid server URL or Ssh key"))
            return
        }
        var folder = SystemHelper.fileName(urlAuxModel.text)
        if (!SystemHelper.saveObject(folder + "/lastServer",
                                     { "server": urlAuxModel.text, "ssh_key": keysListView.currentItem.text })) {
            appError(qsTr("Can't save current configuration"))
            return
        }
        currentServer = urlAuxModel.text
        appPage("VMProfilePage.qml", { "currentFolder": folder })
    }

    UrlModel {
        id: urlAuxModel
    }

    ListModel {
        id: historyListModel
        function find(scheme, host) : int {
            for (var i = 0; i < count; i++) {
                if (get(i).scheme === scheme && (!host || get(i).host === host))
                    return i
            }
            return -1
        }
    }

    ListModel {
        id: keysListModel
        function addSshKey(path) : int {
            if (!path) return -1
            var i
            for (i = 0; i < count; i++) {
                if (get(i).text === path) return i
            }
            switch (SystemHelper.isSshKeyPair(path) ? 2 : (SystemHelper.isSshPrivateKey(path) ? 1 : 0)) {
            case 0: append({ "icon": "qrc:/image-check-bad",  "text": path, "tip": qsTr("This is not an Ssh key") }); break
            case 1: append({ "icon": "qrc:/image-check-part", "text": path, "tip": qsTr("Private SSH key only") }); break
            case 2: append({ "icon": "qrc:/image-check-ok",   "text": path, "tip": qsTr("Private & public Ssh keys") }); break
            default: return -1
            }
            return count - 1
        }
    }

    header: Pane {
        RowLayout {
            anchors.fill: parent
            TintedImage {
                source: "qrc:/image-cbsd-logo"
                HoverHandler {
                    id: hoverHandler
                    //cursorShape: Qt.PointingHandCursor
                    onHoveredChanged: SystemHelper.setCursorShape(hovered ? Qt.PointingHandCursor : -1)
                }
                TapHandler {
                    id: tapHandler
                    onTapped: Qt.openUrlExternally("https://www.bsdstore.ru")
                }
                scale: hoverHandler.hovered ? 1.05 : 1.0
                ToolTip.visible: hoverHandler.hovered
                ToolTip.text: qsTr("Visit the project homepage")
                ToolTip.delay: appTipDelay
                ToolTip.timeout: appTipTimeout

            }
            Label {
                Layout.fillWidth: true
                font.pointSize: appTitleSize
                wrapMode: Text.Wrap
                text: qsTr("Create a virtual machine using the appropriate <i>%1 cloud server</i> and <i>Ssh access key</i>").arg(VMConfigSet.cbsdName.toUpperCase())
            }
        }
    }

    UrlModel {
        id: urlEditModel
        scheme: control.urlSchemeModel[control.schemeIndex]
        host: hostComboBox.editText
        port: Number(portTextField.text)
    }

    TextMetrics {
        id: portTextMetrics
        font: control.font
        text: "65535"
    }

    GridLayout {
        anchors.fill: parent
        anchors.margins: 10
        columns: 3

        // Row 1
        GroupBox {
            Layout.columnSpan: 3
            Layout.fillWidth: true
            padding: 0
            title: qsTr("Select server access method")
            RowLayout {
                anchors.fill: parent
                Repeater {
                    model: control.urlSchemeModel
                    RadioButton {
                        enabled: VMConfigSet.isSchemeEnabled(modelData)
                        checked: control.schemeIndex === index
                        text: modelData.toUpperCase()
                        onClicked: {
                            control.schemeIndex = index
                            control.isFileScheme = (modelData === "file")
                            if (!control.isFileScheme) {
                                hostComboBox.currentIndex = historyListModel.find(modelData)
                                if (!hostComboBox.editText) hostComboBox.contentItem.forceActiveFocus()
                            } else if (!pathTextField.text) pathTextField.forceActiveFocus()
                        }
                    }
                }
            }
        }

        // Row 2
        Label {
            enabled: hostComboBox.enabled
            text: qsTr("Host")
        }
        ComboBox {
            id: hostComboBox
            Layout.fillWidth: true
            focus: !isFileScheme
            enabled: !control.isFileScheme
            selectTextByMouse: true
            editable: true
            textRole: "host"
            valueRole: "port"
            validator: RegularExpressionValidator { regularExpression: /^[^<>:;,?"*|\\ /]+$/ }
            //displayText: count ? currentText : qsTr("Address")
            model: historyListModel
            onModelChanged: currentIndex = 0
            onAccepted: if (dropDownPane.show) setCurrentServer()
            onActivated: function(index) {
                control.schemeIndex = control.urlSchemeModel.indexOf(historyListModel.get(index).scheme)
            }
        }
        MyTextField {
            id: portTextField
            enabled: hostComboBox.enabled
            Layout.preferredWidth: portTextMetrics.advanceWidth + leftPadding + rightPadding
            placeholderText: qsTr("Port")
            validator: IntValidator { bottom: 0; top: 65535 }
            text: hostComboBox.currentValue ? hostComboBox.currentValue : control.urlPortModel[control.schemeIndex]
        }

        // Row 3
        Label {
            enabled: pathTextField.enabled
            text: qsTr("Path")
        }
        MyTextField {
            id: pathTextField
            Layout.fillWidth: true
            focus: isFileScheme
            enabled: control.isFileScheme
            placeholderText: qsTr("Executable")
            validator: RegularExpressionValidator { regularExpression: /^[^<>:;,?"*|\\ ]+$/ }
            onAccepted: if (dropDownPane.show) setCurrentServer()
        }
        SquareButton {
            text: qsTr("Select")
            enabled: pathTextField.enabled
            icon.source: "qrc:/icon-open-folder"
            ToolTip.text: qsTr("Open folder")
            onClicked: {
                var prop = { "title": qsTr("Select %1 executable").arg(VMConfigSet.cbsdName.toUpperCase()) }
                if (pathTextField.text) {
                    var dir = SystemHelper.pathName(pathTextField.text)
                    if (dir) prop["path"] = dir
                }
                var dlg = Qt.createComponent("MyFileDialog.qml").createObject(control, prop)
                if (!dlg) { appToast(qsTr("Can't load MyFileDialog.qml")); return }
                dlg.accepted.connect(function() {
                    var path = dlg.filePath()
                    if (SystemHelper.isExecutable(path)) pathTextField.text = path
                    else appInfo(qsTr("The file is not executable"))
                })
                dlg.open()
            }
        }

        // Row 4
        GroupBox {
            Layout.columnSpan: 2
            Layout.fillWidth: true
            Layout.preferredHeight: appRowHeight * 5 + topPadding + bottomPadding
            leftPadding: 0
            rightPadding: 0
            title: qsTr("Select ssh access key")
            ListView {
                id: keysListView
                anchors.fill: parent
                clip: true
                model: keysListModel
                delegate: ItemDelegate {
                    spacing: 0
                    padding: 2
                    width: ListView.view.width
                    height: appRowHeight
                    highlighted: ListView.isCurrentItem
                    text: model.text
                    icon.source: model.icon
                    icon.color: "transparent"
                    onClicked: ListView.view.currentIndex = index
                    ToolTip.text: model.tip
                    ToolTip.visible: hovered
                    ToolTip.delay: appTipDelay
                    ToolTip.timeout: appTipTimeout
                }
            }
        }
        SquareButton {
            text: qsTr("Append")
            icon.source: "qrc:/icon-open-folder"
            ToolTip.text: qsTr("Open folder")
            onClicked: {
                var dlg = Qt.createComponent("MyFileDialog.qml").createObject(control, {
                            "title": qsTr("Select Ssh access key") })
                if (!dlg) { appToast(qsTr("Can't load MyFileDialog.qml")); return }
                dlg.accepted.connect(function() { keysListView.currentIndex = keysListModel.addSshKey(dlg.filePath()) })
                dlg.open()
            }
        }
    }

    footer: DropDownPane {
        id: dropDownPane
        show: isFileScheme ? SystemHelper.isExecutable(pathTextField.text) : urlEditModel.remote
        RowLayout {
            anchors.fill: parent
            Label {
                id: serverLabel
                Layout.fillWidth: true
                horizontalAlignment: Text.AlignHCenter
                font.pointSize: appTitleSize
                text: isFileScheme ? "file:" + pathTextField.text : urlEditModel.location
                elide: Text.ElideRight
            }
            SquareButton {
                enabled: keysListView.count && ~keysListView.currentIndex
                highlighted: true
                text: qsTr("Profile")
                icon.source: "qrc:/icon-page-next"
                ToolTip.text: qsTr("Get VM profiles")
                onClicked: setCurrentServer()
            }
        }
    }
}
